// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SampleBidirectionalRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SampleBidirectionalRequest) Reset()         { *m = SampleBidirectionalRequest{} }
func (m *SampleBidirectionalRequest) String() string { return proto.CompactTextString(m) }
func (*SampleBidirectionalRequest) ProtoMessage()    {}
func (*SampleBidirectionalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{0}
}

func (m *SampleBidirectionalRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SampleBidirectionalRequest.Unmarshal(m, b)
}
func (m *SampleBidirectionalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SampleBidirectionalRequest.Marshal(b, m, deterministic)
}
func (m *SampleBidirectionalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleBidirectionalRequest.Merge(m, src)
}
func (m *SampleBidirectionalRequest) XXX_Size() int {
	return xxx_messageInfo_SampleBidirectionalRequest.Size(m)
}
func (m *SampleBidirectionalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleBidirectionalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SampleBidirectionalRequest proto.InternalMessageInfo

func (m *SampleBidirectionalRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SampleBidirectionalResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SampleBidirectionalResponse) Reset()         { *m = SampleBidirectionalResponse{} }
func (m *SampleBidirectionalResponse) String() string { return proto.CompactTextString(m) }
func (*SampleBidirectionalResponse) ProtoMessage()    {}
func (*SampleBidirectionalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2141552de9bf11d0, []int{1}
}

func (m *SampleBidirectionalResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SampleBidirectionalResponse.Unmarshal(m, b)
}
func (m *SampleBidirectionalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SampleBidirectionalResponse.Marshal(b, m, deterministic)
}
func (m *SampleBidirectionalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleBidirectionalResponse.Merge(m, src)
}
func (m *SampleBidirectionalResponse) XXX_Size() int {
	return xxx_messageInfo_SampleBidirectionalResponse.Size(m)
}
func (m *SampleBidirectionalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleBidirectionalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SampleBidirectionalResponse proto.InternalMessageInfo

func (m *SampleBidirectionalResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*SampleBidirectionalRequest)(nil), "pb.SampleBidirectionalRequest")
	proto.RegisterType((*SampleBidirectionalResponse)(nil), "pb.SampleBidirectionalResponse")
}

func init() { proto.RegisterFile("sample.proto", fileDescriptor_2141552de9bf11d0) }

var fileDescriptor_2141552de9bf11d0 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe0, 0x92,
	0x0a, 0x06, 0x8b, 0x39, 0x65, 0xa6, 0x64, 0x16, 0xa5, 0x26, 0x97, 0x64, 0xe6, 0xe7, 0x25, 0xe6,
	0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a,
	0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x81, 0xd9, 0x4a, 0x86, 0x5c, 0xd2, 0x58, 0x75, 0x14, 0x17,
	0xe4, 0xe7, 0x15, 0xa7, 0x62, 0xd3, 0x62, 0x94, 0xc6, 0xc5, 0x06, 0xd1, 0x22, 0x14, 0xc3, 0x25,
	0x8c, 0x45, 0xb3, 0x90, 0x9c, 0x5e, 0x41, 0x92, 0x1e, 0x6e, 0x77, 0x48, 0xc9, 0xe3, 0x94, 0x87,
	0xd8, 0xaa, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0xc4, 0x12, 0xc5, 0x54, 0x90, 0x94, 0xc4, 0x06,
	0xf6, 0x9d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x7b, 0xda, 0x9b, 0xed, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SampleClient is the client API for Sample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SampleClient interface {
	SampleBidirectional(ctx context.Context, opts ...grpc.CallOption) (Sample_SampleBidirectionalClient, error)
}

type sampleClient struct {
	cc grpc.ClientConnInterface
}

func NewSampleClient(cc grpc.ClientConnInterface) SampleClient {
	return &sampleClient{cc}
}

func (c *sampleClient) SampleBidirectional(ctx context.Context, opts ...grpc.CallOption) (Sample_SampleBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Sample_serviceDesc.Streams[0], "/pb.Sample/SampleBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &sampleSampleBidirectionalClient{stream}
	return x, nil
}

type Sample_SampleBidirectionalClient interface {
	Send(*SampleBidirectionalRequest) error
	Recv() (*SampleBidirectionalResponse, error)
	grpc.ClientStream
}

type sampleSampleBidirectionalClient struct {
	grpc.ClientStream
}

func (x *sampleSampleBidirectionalClient) Send(m *SampleBidirectionalRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sampleSampleBidirectionalClient) Recv() (*SampleBidirectionalResponse, error) {
	m := new(SampleBidirectionalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SampleServer is the server API for Sample service.
type SampleServer interface {
	SampleBidirectional(Sample_SampleBidirectionalServer) error
}

// UnimplementedSampleServer can be embedded to have forward compatible implementations.
type UnimplementedSampleServer struct {
}

func (*UnimplementedSampleServer) SampleBidirectional(srv Sample_SampleBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method SampleBidirectional not implemented")
}

func RegisterSampleServer(s *grpc.Server, srv SampleServer) {
	s.RegisterService(&_Sample_serviceDesc, srv)
}

func _Sample_SampleBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SampleServer).SampleBidirectional(&sampleSampleBidirectionalServer{stream})
}

type Sample_SampleBidirectionalServer interface {
	Send(*SampleBidirectionalResponse) error
	Recv() (*SampleBidirectionalRequest, error)
	grpc.ServerStream
}

type sampleSampleBidirectionalServer struct {
	grpc.ServerStream
}

func (x *sampleSampleBidirectionalServer) Send(m *SampleBidirectionalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sampleSampleBidirectionalServer) Recv() (*SampleBidirectionalRequest, error) {
	m := new(SampleBidirectionalRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Sample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Sample",
	HandlerType: (*SampleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SampleBidirectional",
			Handler:       _Sample_SampleBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sample.proto",
}
